// <auto-generated />
using System;
using Maskinstation.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Maskinstation.Migrations
{
    [DbContext(typeof(MaskinstationContext))]
    partial class MaskinstationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Maskinstation.Models.MachineTags", b =>
                {
                    b.Property<Guid>("MachineID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MachineID", "TagID");

                    b.HasIndex("TagID");

                    b.ToTable("MachineTags");
                });

            modelBuilder.Entity("Maskinstation.Models.UserTags", b =>
                {
                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserID", "TagID");

                    b.HasIndex("TagID");

                    b.ToTable("UserTags");
                });

            modelBuilder.Entity("Maskinstation.models.Brand", b =>
                {
                    b.Property<Guid>("BrandID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ImageID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BrandID");

                    b.HasIndex("ImageID");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("Maskinstation.models.Image", b =>
                {
                    b.Property<Guid>("ImageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MachineID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ImageID");

                    b.HasIndex("MachineID");

                    b.HasIndex("UserID");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Maskinstation.models.Machine", b =>
                {
                    b.Property<Guid>("MachineID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BrandID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MachineID");

                    b.HasIndex("BrandID");

                    b.HasIndex("UserID");

                    b.ToTable("Machines");
                });

            modelBuilder.Entity("Maskinstation.models.Tag", b =>
                {
                    b.Property<Guid>("TagID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TagType")
                        .HasColumnType("int");

                    b.HasKey("TagID");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Maskinstation.models.User", b =>
                {
                    b.Property<Guid>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("ImageID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("ImageID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Maskinstation.Models.MachineTags", b =>
                {
                    b.HasOne("Maskinstation.models.Machine", "Machine")
                        .WithMany("MachineTags")
                        .HasForeignKey("MachineID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Maskinstation.models.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Machine");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Maskinstation.Models.UserTags", b =>
                {
                    b.HasOne("Maskinstation.models.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Maskinstation.models.User", "User")
                        .WithMany("UserTags")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Maskinstation.models.Brand", b =>
                {
                    b.HasOne("Maskinstation.models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Maskinstation.models.Image", b =>
                {
                    b.HasOne("Maskinstation.models.Machine", null)
                        .WithMany("images")
                        .HasForeignKey("MachineID");

                    b.HasOne("Maskinstation.models.User", null)
                        .WithMany("images")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("Maskinstation.models.Machine", b =>
                {
                    b.HasOne("Maskinstation.models.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Maskinstation.models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("Brand");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Maskinstation.models.User", b =>
                {
                    b.HasOne("Maskinstation.models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageID");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Maskinstation.models.Machine", b =>
                {
                    b.Navigation("MachineTags");

                    b.Navigation("images");
                });

            modelBuilder.Entity("Maskinstation.models.User", b =>
                {
                    b.Navigation("UserTags");

                    b.Navigation("images");
                });
#pragma warning restore 612, 618
        }
    }
}
